#+TITLE: Preparation Assessment 12
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything entitiespretty
#+SCORE: 100

* DONE Answer What is True
  CLOSED: [2018-04-02 Mon 15:11]
  You know what to do:
  - [X] I know in what sense a language is a subset of a set of all strings over
    some alphabet.
  - [X] I know that an alphabet is any non-empty, finite set of symbols. 
  - [X] I know that a string over an alphabet is a finite sequence of symbols
    from the given alphabet.
  - [X] I will come to class prepared to look more closely at regular languages
    and regular expressions, and give examples of each, starting with this
    description/definition that is more detailed than that given in the book:
    
   A language is /regular/ *iff* some /regular expression/ describes it.

   Regular expressions use the so-called regular operations (\cup, \circ, and \star) ---
   (union, concatenation, and star) --- to build regular languages. Here is a
   recursive definition:

  R is a *regular expression* (an *re* for short) if R is any of

  - \emptyset
  - {\lambda}
  - {a} for some a \in \Sigma
  - R_1 \cup R_2, where R_1 and R_2 are *re*\rsquo{}s
  - R_1 \circ R_2, where R_1 and R_2 are *re*\rsquo{}s
  - R^{\star}, where R is an *re*

  Some shorthand:

  - a \equiv \{a\}
  - \lambda \equiv \{\lambda\}
  - R^{\plus} \equiv R \circ R^{\star}
  - R^{\star} \equiv R^{\plus} \cup \lambda
  - R^k \equiv R \circ R \circ R \circ \dots \circ R (k times)

  Note: R \circ R is usually written without the \circ, i.e., RR. In this way \circ is
  analogous to the multiplication operator.

* DONE Answer a Language/Grammar Question 
  CLOSED: [2018-04-03 Tue 11:36]
  What is the language generated by the phrase-structure grammar with
  productions S → SA, S → 0, A → 1A, A → 1, where S is the start symbol?

  - [X] The set of all strings that consist of a 0 followed by an arbitrary
    number of 1\rsquo{}s (possibly none).
  - [ ] The set of all strings that consist of a 1 followed by an arbitrary
    number of 0\rsquo{}s (possibly none).
  - [ ] The set of all strings consisting of an odd number of 1\rsquo{}s and no other
    symbols.
  - [ ] The set of all strings consisting of an even number of 1\rsquo{}s and no other
    symbols.

* DONE Answer a Grammar/Language Question 
  CLOSED: [2018-04-03 Tue 11:57]
  What is a grammar that generates the language {0^{2n}1^n \vbar n \ge 0}?

  - [ ] S → 010S, S → \lambda
  - [X] S → 00S1, S → \lambda
  - [ ] S → 00S, S → 11S, S → \lambda
  - [ ] S → 1S, S → 0S, S → \lambda

* DONE Be Prepared to Work
  CLOSED: [2018-04-04 Wed 15:13]
  Come to class prepared to work on the following exercises where the goal is to
  classify/distinguish the four grammar types:

  Let N = [S A B], T = [a b], and G = [N T S P] (P to be given later).

  Determine whether G

  - is a type 0 grammar but not a type 1 grammar, or
  - is a type 1 grammar but not a type 2 grammar, or
  - is a type 2 grammar but not a type 3 grammar, or
  - is a type 3 grammar,

  when P, the set of productions, is one of the following:

** Exercise 1

Type 2 grammar but not type 3

- not left linear
- not right linear
#+begin_example
    S \rightarrow 0AB

    A \rightarrow B1

    B \rightarrow \lambda
#+end_example

** Exercise 2
Type 3 grammar.
- right linear
#+begin_example
    S \rightarrow 0A

    A \rightarrow 1B

    B \rightarrow 1
#+end_example

** Exercise 3
Type 1 grammar but not type 2 grammar
#+begin_example
    S \rightarrow AB0

    AB \rightarrow 10
#+end_example


** Exercise 4

Type 2 grammar but not type 3 grammar

#+begin_example
    S \rightarrow BAB

    A \rightarrow 0A

    B \rightarrow 01
#+end_example

** Exercise 5
Type 0 grammar but not type 1 grammar. 
- LHS will be longer than RHS
#+begin_example
    S \rightarrow 0A

    0A \rightarrow B

    B \rightarrow 0A

    A \rightarrow 1
#+end_example

** Exercise 6
Type 3 grammar
- left linear
#+begin_example
    S \rightarrow A0

    A \rightarrow 0

    S \rightarrow \lambda
#+end_example
