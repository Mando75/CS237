#+TITLE: Preparation Assessment 11
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything entitiespretty
#+SCORE: 95

* DONE Be Prepared to Give a Short Answer
  CLOSED: [2018-03-26 Mon 17:26]
  One difference between graphs and trees is that graphs can have
  *cycles*. A tree is an *acylic* graph --- one without cycles. A
  *directed* graph is one with directed edges. A *directed acylic
  graph*, known as a /dag/, is one with both characteristics. Draw
  the Venn diagram with two sets and their relationship (for example,
  set-subset, non-empty intersection, ...). The two sets are:

  1. the set of trees
  2. the set of dags
https://photos.app.goo.gl/TcEJm4gnxSttKMJJ3

Trees and dags overlap. Not all trees are dags, and not all dags are trees. 
You could turn any tree into a dag by giving each edge a direction, but until that
direction is assigned, a tree is not necessarily a dag. 

* DONE Be Prepared to Give Another Short Answer
  CLOSED: [2018-03-26 Mon 17:35]
   Draw the graph whose nodes are a subset of the integers, and whose relation
   is the extension of the predicate:

#+BEGIN_SRC emacs-lisp :results silent
  (defun p1 (x y)
    (and (< (abs x) 20)
         (< (abs y) 20)
         (= 1 (+ (* 5 x) (* 7 y)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (loop for i in (number-sequence -19 19)
        collect (loop for j in (number-sequence -19 19)
                   when (p1 i j)
                     collect (cons i j)))
#+END_SRC

#+RESULTS:
| (-18 . 13) |
| (-11 . 8)  |
| (-4 . 3)   |
| (3 . -2)   |
| (10 . -7)  |
| (17 . -12) |

    
https://photos.app.goo.gl/BJpfRbMahg5bkuXB3


:Feedback:
This should be directed since the relationship doesn't hold both ways.
:END:

* DONE Be Prepared to Give Yet Another Short Answer
  CLOSED: [2018-03-26 Mon 17:46]
   Draw the graph whose nodes are the twelve divisors of 72, and whose relation
   is the extension of the predicate:

#+BEGIN_SRC emacs-lisp :results silent
  (defun p2 (x y)
    (or (= y (* 2 x)) (= y (* 3 x))))

 (setq divisors-of-72 '(1 2 3 4 6 8 9 12 18 24 36 72))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (loop for i in divisors-of-72
          collect (loop for j in divisors-of-72
                     when (p2 i j)
                         collect (cons i j)))
#+END_SRC

#+RESULTS:
| (1 . 2)   | (1 . 3)   |
| (2 . 4)   | (2 . 6)   |
| (3 . 6)   | (3 . 9)   |
| (4 . 8)   | (4 . 12)  |
| (6 . 12)  | (6 . 18)  |
| (8 . 24)  |           |
| (9 . 18)  |           |
| (12 . 24) | (12 . 36) |
| (18 . 36) |           |
| (24 . 72) |           |
| (36 . 72) |           |


I drew this out on the board... 

:Feedback:
I would have like to see the picture that you drew. 
-5 points
:END:
