#+TITLE:  Matrix Inversion
#+LANGUAGE: en
#+OPTIONS:  H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP:  showeverything entitiespretty

* Elementary Operations

** Easy

   Exchange two equations (rows) of the system.

** Not Hard

   Replace an equation with its nonzero multiple.

** Harder

   Replace an equation with a sum or difference of this equation and
   some multiple of another equation.

* Sample Code

** Easy

#+BEGIN_SRC emacs-lisp :results silent
  (defun easy-op (matrix i j)
  "Replaces swaps row i and j and returns the modified matrix"
     (let ((ith-row (nth i matrix))
           (jth-row (nth j matrix)))
      (setf (nth j matrix) ith-row)
      (setf (nth i matrix) jth-row)
      matrix))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq test-matrix1 '((1 2) (2 4)))

  (easy-op test-matrix1 0 1)
#+END_SRC

#+RESULTS:
| 2 | 4 |
| 1 | 2 |

** Not Hard

#+BEGIN_SRC emacs-lisp :results silent
  (defun not-hard-op (matrix i k)
   (setf (nth i matrix) (mapcar (lambda (x) (* 2 x)) (nth i matrix)))
   matrix)
    
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (not-hard-op test-matrix1 0 4)
#+END_SRC

#+RESULTS:
| 8 | 16 |
| 1 |  2 |

** Harder

*** Sample Code

#+BEGIN_SRC emacs-lisp
  (defun harder-op (matrix i j k)
    (let* ((multiplier (/ (nth i (nth k matrix)) (float (nth i (nth j matrix)))))
           (new-row (map 'list (lambda (x y) (- y (* multiplier x)))
                         (nth j matrix) (nth k matrix))))
      (setf (nth k matrix) new-row)
      matrix))
#+END_SRC

* Example 1 on page 210

| 2 | -1 |  1 | 1 |
| 4 |  1 | -1 | 5 |
| 1 |  1 |  1 | 0 |

  Solve by inverting this augmented matrix using the harder elementary
  operation:

#+tblname: matrix-as-table-0-0-2
| 2 | -1 |  1 | 1 | 0 | 0 |
| 4 |  1 | -1 | 0 | 1 | 0 |
| 1 |  1 |  1 | 0 | 0 | 1 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-0-0-2
  (harder-op matrix 0 0 2)
#+END_SRC

#+tblname: matrix-as-table-0-0-1
|   2 |  -1 |   1 |    1 |   0 |   0 |
|   4 |   1 |  -1 |    0 |   1 |   0 |
| 0.0 | 1.5 | 0.5 | -0.5 | 0.0 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-0-0-1
  (harder-op matrix 0 0 1)
#+END_SRC

#+tblname: matrix-as-table-1-1-2
|   2 |  -1 |    1 |    1 |   0 |   0 |
| 0.0 | 3.0 | -3.0 | -2.0 | 1.0 | 0.0 |
| 0.0 | 1.5 |  0.5 | -0.5 | 0.0 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-1-1-2
  (harder-op matrix 1 1 2)
#+END_SRC

#+tblname: matrix-as-table-2-2-0
|   2 |  -1 |    1 |    1 |    0 |   0 |
| 0.0 | 3.0 | -3.0 | -2.0 |  1.0 | 0.0 |
| 0.0 | 0.0 |  2.0 |  0.5 | -0.5 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-2-2-0
  (harder-op matrix 2 2 0)
#+END_SRC

#+tblname: matrix-as-table-2-2-1
| 2.0 | -1.0 |  0.0 | 0.75 | 0.25 | -0.5 |
| 0.0 |  3.0 | -3.0 | -2.0 |  1.0 |  0.0 |
| 0.0 |  0.0 |  2.0 |  0.5 | -0.5 |  1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-2-2-1
  (harder-op matrix 2 2 1)
#+END_SRC

#+tblname: matrix-as-table-1-1-0
| 2.0 | -1.0 | 0.0 |  0.75 | 0.25 | -0.5 |
| 0.0 |  3.0 | 0.0 | -1.25 | 0.25 |  1.5 |
| 0.0 |  0.0 | 2.0 |   0.5 | -0.5 |  1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-1-1-0
  (harder-op matrix 1 1 0)
#+END_SRC

#+tblname: matrix-as-table-one-half-0
| 2.0 | 0.0 | 0.0 | 0.33333333333333337 | 0.3333333333333333 | 0.0 |
| 0.0 | 3.0 | 0.0 |               -1.25 |               0.25 | 1.5 |
| 0.0 | 0.0 | 2.0 |                 0.5 |               -0.5 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-one-half-0
  (replace-with-multiple matrix 0.5 0)
#+END_SRC

#+tblname: matrix-as-table-one-third-1
| 1.0 | 0.0 | 0.0 | 0.16666666666666669 | 0.16666666666666666 | 0.0 |
| 0.0 | 3.0 | 0.0 |               -1.25 |                0.25 | 1.5 |
| 0.0 | 0.0 | 2.0 |                 0.5 |                -0.5 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-one-third-1
  (replace-with-multiple matrix (/ 1 3.0) 1)
#+END_SRC

#+tblname: matrix-as-table-one-half-2
| 1.0 | 0.0 | 0.0 |  0.16666666666666669 | 0.16666666666666666 | 0.0 |
| 0.0 | 1.0 | 0.0 | -0.41666666666666663 | 0.08333333333333333 | 0.5 |
| 0.0 | 0.0 | 2.0 |                  0.5 |                -0.5 | 1.0 |

#+BEGIN_SRC emacs-lisp :var matrix=matrix-as-table-one-half-2
  (replace-with-multiple matrix 0.5 2)
#+END_SRC

#+RESULTS:
| 1.0 | 0.0 | 0.0 |  0.16666666666666669 | 0.16666666666666666 | 0.0 |
| 0.0 | 1.0 | 0.0 | -0.41666666666666663 | 0.08333333333333333 | 0.5 |
| 0.0 | 0.0 | 1.0 |                 0.25 |               -0.25 | 0.5 |

#+BEGIN_SRC emacs-lisp :results silent
  (defun dot-product (vector1 vector2)
    (apply '+ (mapcar* '* vector1 vector2)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (dot-product '(0.166666666666 0.166666666 0.0 4) '(1 5 0))
#+END_SRC

#+RESULTS:
: 0.999999996666

#+BEGIN_SRC emacs-lisp :results silent
  (defun matrix-mult-by-vector (matrix vec)
    (mapcar (lambda (row) (dot-product row vec)) matrix))
#+END_SRC

#+tblname: inverse-matrix-as-table
|  0.16666666666666669 | 0.16666666666666666 | 0.0 |
| -0.41666666666666663 | 0.08333333333333333 | 0.5 |
|                 0.25 |               -0.25 | 0.5 |

#+BEGIN_SRC emacs-lisp :var matrix=inverted-matrix :results raw
  (mapcar 'floor (matrix-mult-by-vector matrix '(2 3 8)))
#+END_SRC

#+RESULTS:
(2 3 8)
(1 0 -1)
