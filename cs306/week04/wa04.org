#+TITLE: Weekly Assignment 04
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything entitiespretty
#+BEGIN: clocktable :maxlevel 2 :scope file
#+CAPTION: Clock summary at [2018-05-24 Thu 21:08]
| Headline                                |   Time |      |
|-----------------------------------------+--------+------|
| *Total time*                            | *3:24* |      |
|-----------------------------------------+--------+------|
| Apply the Master Theorem                |   0:36 |      |
| Solidify What You Might Have Started... |   1:17 |      |
| \_  Work                                |        | 0:02 |
| What I Learned                          |   0:08 |      |
| Notes                                   |   1:23 |      |
| \_  Day 2                               |        | 1:23 |
#+END:

Collaborators:

Matt Wyndham
Bryan Muller
James Palmer
Timothy Steele
Asa Skousen
Jonathan Manoa
Adam Gehring

* DONE Apply the Master Theorem
  CLOSED: [2018-05-24 Thu 21:00]
  :LOGBOOK:
  CLOCK: [2018-05-24 Thu 16:32]--[2018-05-24 Thu 17:08] =>  0:36
  :END:

  By filling in the table (the first row is done for you), show that you know
  how to use [[file:the-master-theorem.org][the Master Theorem]] to find the Big-Theta order of growth for
  solutions of the following recurrence relations (where in every case, T(1) =
  1):

  #+ATTR_HTML: :border 2 :rules all :frame border
  |  / | <                     | < | > | < | > | < | > | <>                | <>        |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  |    | T(n) =                | a |   | b |   | d |   | a <, =, or > ? b^d | \Theta         |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 1. | 2T(n/2) + n - 1       | 2 |   | 2 |   | 1 |   | =                 | n log_2 n  |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 2. | 2T(n/2) + 2n + 1      | 2 |   | 2 |   | 1 |   | =                 | n log_2 n  |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 3. | 2T(n/2) + 1           | 2 |   | 2 |   | 0 |   | >                 | n^{}         |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 4. | 3T(n/3) + n^2 + 2n + 1 | 3 |   | 3 |   | 2 |   | <                 | n^2       |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 5. | 4T(n/2) + n           | 4 |   | 2 |   | 1 |   | >                 | n^2^{}        |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 6. | 4T(n/2) + n^2          | 4 |   | 2 |   | 2 |   | =                 | n^2 log_2 n |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|
  | 7. | 4T(n/2) + n^3          | 4 |   | 2 |   | 3 |   | <                 | n^3        |
  |----+-----------------------+---+---+---+---+---+---+-------------------+-----------|

* DONE Solidify What You Might Have Started in Class
  CLOSED: [2018-05-24 Thu 20:59]
  :LOGBOOK:
  CLOCK: [2018-05-24 Thu 17:08]--[2018-05-24 Thu 18:23] =>  1:15
  :END:

  Using as your guide the example shown in class and reproduced below
  (fleshed out with more detail), *solve using telescoping* the
  recurrence relation for the mergesort algorithm. (Don't be confused
  by the use of /a_n/ instead of /T(n)/. While notationally different,
  they are semantically equivalent.)

  Example: a_n = 2a_{n/2} + 1, a_1 = 3.

  Let n be a power of 2, so n = 2^k for some arbitrary k.

  Hence, lg n = k and n/2^k = 1. (Note that 1 is the *index value* for the
  initial condition. That's important.)

  In the table below, the following two steps are collapsed into one
  to produce each equation (after the first):

  1. Substitute the *divided* term into the recurrence *everywhere it occurs*.
     (That is, substitute n/2 for n, wherever n occurs, which means you must
     *divide the previous index by 2* each time.)
  2. Multiply everything on both sides of the next equation by 2 (the
     coefficient of the first term on the right-hand side of the first
     equation). The goal for telescoping purposes is to make the term on the
     left-hand side of the next equation look exactly like the first term on the
     right-hand side of the current equation.

     | a_{n}                 | = | 2 a_{n/2}    | + |      1 |
     | 2 a_{n/2}             | = | 2^2 a_{n/2^2}  | + |      2 |
     | 2^2 a_{n/2^2}           | = | 2^3 a_{n/2^3} | + |     2^2 |
     |                    | \bullet |           |   |        |
     |                    | \bullet |           |   |        |
     |                    | \bullet |           |   |        |
     | 2^{k - 1}a_{n/2^{k - 1}} | = | 2^k a_{n/2^k} | + | 2^{k - 1} |

  The *telescoped* result is:

  a_{n} = 2^k a_{n/2^k} + \sum_{i = 0}^{k - 1 }2^i = n \cdot a_{1} + \sum_{i = 0}^{k - 1 }2^i = n \cdot 3 + 2^k - 1 =
  3n + n - 1 = 4n - 1.

  Using a table with n labeling the first column, compare a_n as
  computed from the *recurrence relation* with a_n as computed from
  the *solution* (4n - 1, a function of n):

  #+ATTR_HTML: :border 2 :rules all :frame border
  |  / | <                          | <             |
  |  n | a_n = 2a_{n/2} + 1             | a_n = 4n - 1   |
  |----+----------------------------+---------------|
  |  1 | a_1 = 3 (initial condition) | 4*1 - 1 = 3   |
  |  2 | 2*a_1 + 1 = 2*3 + 1 = 7     | 4*2 - 1 = 7   |
  |  4 | 2*a_2 + 1 = 2*7 + 1 = 15    | 4*4 - 1 = 15  |
  |  8 | 2*a_4 + 1 = 2*15 + 1 = 31   | 4*8 - 1 = 31  |
  | 16 | 2*a_8 + 1 = 2*31 + 1 = 63   | 4*16 - 1 = 63 |

  Now, for the mergesort algorithm recurrence relation solution, copy
  and modify the steps shown above to solve:

  a_n = 2a_{n/2} + n - 1, a_1 = 0.

  (Note the difference in the f(n) term: 1 for the example; n - 1
  for mergesort.)

  For full credit, make the comparison table with five rows (five
  values for n), as shown above.
 
** DONE Work
   CLOSED: [2018-05-24 Thu 20:59]
   :LOGBOOK:
   CLOCK: [2018-05-24 Thu 20:57]--[2018-05-24 Thu 20:59] =>  0:02
   :END:
Given: 

   \(n = 2^k\)
  
   \(k = log n\)

   \(a_1 = 0\)

   | a_n       | = | 2a_{n/2}    | + | n        | - |  1 |
   | 2a_{n/2}    | = | 2^{2}a_{n/2^2} | + | 2(n/2)   | - |  2 |
   | 2^{2}a_{n/2^2} | = | 2^{3}a_{n/2^3} | + | 2^2(n/2^2) | - | 2^2 |
   | 2^{3}a_{n/2^3} | = | 2^{4}a_{n/2^4} | + | 2^{3}(n/2^{3}) | - | 2^3 |
   | 2^{4}a_{n/2^4} | = | 2^{5}a_{n/2^5} | + | 2^{4}(n/2^4) | - | 2^4 |
   \downarrow
   \downarrow
   \downarrow
   | 2^{k-1}a_{n/2^{k-1}} | = | 2^{k}a_{n/2^k} | + | 2^{k-1}n_{2^{k-1}} | - | 2^k |
   

   The telescoped result is:

   a_n = 2^k a_{n/2^k} + \sum_{i=0}^{k-1}n - \sum_{i=0}^{k-1} 2 
     
   \rightarrow = na_1 + kn - (2^k -1)
   \rightarrow = 0 + kn - n + 1

   \rightarrow = (k-1)n + 1

   \rightarrow = kn - n + 1

   \rightarrow = nlog(n) - n + 1 

   \rightarrow \in \Theta(n log(n))


   |  n | a_n = 2a_{n/2} + n - 1         | a_n = nlog(n) - n + 1    |
   |----+----------------------------+-------------------------|
   |  1 | a_1 = 0 (initial condition) | log(1) - 1 + 1 = 0      |
   |  2 | a_2 = 2a_1 + 2 - 1 = 1       | 2log(2) - 2 + 1 = 1     |
   |  4 | a_4 = 2a_2 + 4 - 1 = 5       | 4log(4) - 4 + 1 = 5     |
   |  8 | a_8 = 2a_4 + 8 - 1 = 17      | 8log(8) - 8 + 1 = 17    |
   | 16 | a_16 = 2a_8 + 16 - 1 = 49    | 16log(16) - 16 + 1 = 49 |
  
  
* DONE What I Learned 
  CLOSED: [2018-05-24 Thu 21:08]
  :LOGBOOK:
  CLOCK: [2018-05-24 Thu 21:00]--[2018-05-24 Thu 21:08] =>  0:08
  :END:

  The activities for this week have helped me solidfy my understanding of
  recurrence relations.

  I feel like I have gained a better understanding of how recurrence relations
  work and how I can approach solving them. Working with the groups in class and
  on the homework were the activities that really solidfied it for me. I don't
  think I'm an expert yet, but I now know how to approach solving them

* Notes

** Day 2
   :LOGBOOK:
   CLOCK: [2018-05-23 Wed 08:35]--[2018-05-23 Wed 09:30] =>  0:55
   CLOCK: [2018-05-23 Wed 08:07]--[2018-05-23 Wed 08:35] =>  0:28
   :END:

   
*** Recurrence Relation 

    Sub log_2 n for k to solve for W(1)

*** Master Theorem

    

