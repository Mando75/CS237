#+TITLE: Compare Recursive to Iterative
#+AUTHOR: CS 306
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything

** The Problem with Recursion

   /One should be careful with recursive algorithms because
   their succinctness may mask their inefficiency./

   Anany Levitin, page 74

#+BEGIN_SRC C++ :tangle compare.cpp
  #include <iostream>
  #include <iomanip>
  #include <string>
  using namespace std;

  /*
   * Compare various algorithms that can be implemented either
   * using recursion or iteration.
   *
   * Choose which test(s) to run by changing true to false or vice-versa,
   * in any of the if statements in main, and invoke by:
   *
   * g++ compare.cpp -o compare && ./compare
   */

  /*
   * The Tower of Hanoi puzzle involves a recurrence relation
   * called T(n) representing the minimal number of moves needed
   * to transfer a stack of n disks to an empty spire.
   *
   * T(n) = 2T(n - 1) + 1
   * T(1) = 1 (it takes one move to move one disk).
   * (or equivalently)
   * T(0) = 0 (it takes zero moves to move zero disks).
   *
   * It is a straightforward iterative exercise to use substitution
   * to solve this recurrence relation:
   *
   * T(n) = 2T(n - 1) + 1
   *      = 2   (2(T(n - 2) + 1)) + 1     = 2^2 T(n - 2) + 2 + 1
   *      = 2^2 (2(T(n - 3) + 1)) + 2 + 1 = 2^3 T(n - 3) + 2^2 + 2 + 1
   *      .
   *      .
   *      .
   *      = 2^{n - 1} T(1) + 2^{n - 2} + 2^{n - 3} + .. + 2 + 1
   *      = 2^{n - 1} + 2^{n - 2} + .. + 2 + 1
   *      = 2^n - 1
   *
   * The recurrence relation has been used repeatedly to express
   * T(n) in terms of previous terms of the sequence. In the next to
   * last equality, the initial condition T(1) = 1 has been
   * used. The last equality is based on the formula for the sum of
   * the terms of a geometric series.
   *
   * The myth created to accompany the puzzle tells of a tower in
   * Hanoi where monks are transferring 64 gold disks from one
   * diamond spire to another, according to the rules of the
   * puzzle. The myth says that the world will end when they finish
   * the puzzle. How long after the monks started will the world end
   * if the monks take one second to move a disk?
   *
   * From the explicit formula, the monks require
   *
   *     2^64 - 1 = 18,446,744,073,709,551,615
   *
   * moves to transfer the disks. Making one move per second, it
   * will take them more than 500 billion years to complete the
   * transfer!
   */

  char START = 'A';
  char SPARE = 'B';
  char FINISH = 'C';

  void moveDisk(int n, char start, char finish, char spare)
  {
     if (n == 1)
     {
        cout << start << " -> " << finish << endl;
     }
     else
     {
        moveDisk(n - 1, start, spare, finish);
        moveDisk(1, start, finish, spare);
        moveDisk(n - 1, spare, finish, start);
     }
  }

  void testMoveDisk()
  {
     moveDisk(8, START, FINISH, SPARE);
     cout << ("\n-------------------------\n");
  }

  /*
   * Would an iterative version of Tower of Hanoi be simpler, or not?
   *
   * Google it to see the answer --- definitely not!
   */

  int indent = 0;

  /*
   * The factorial function, recursive version.
   * This code has been "instrumented" to show the recursive
   * call structure.
   */
  int factorial(int n)
  {
     int rtnval = 0;
     cout << setw(++indent) << ">" << "factorial(" << n << ")\n";

     if (n == 0)
     {
        rtnval = 1;
     }
     else
     {
        rtnval = (n * factorial(n - 1));
     }
     cout << setw(indent--) << rtnval << endl;

     return rtnval;
  }

  void testFactorial()
  {
     indent = 0;
     int fact10 = factorial(10);
     cout << "factorial(10) = " << fact10 << endl;
     cout << "-------------------------" << endl;
  }

  /*
   * An iterative version of the factorial function.
   */
  int iterativeFactorial(int n)
  {
     int rtnval = 1;
     while (n > 0)
     {
        rtnval *= n--;
     }
     return rtnval;
  }

  void testIterativeFactorial()
  {
     int fact10 = iterativeFactorial(10);
     cout << "iterative factorial(10) = " << fact10 << endl;
     cout << "-------------------------" << endl;
  }

  /*
   * The famous fibonacci function, recursive version, instrumented.
   */
  int fibonacci(int n)
  {
     cout << setw(++indent) << ">" << "fibonacci(" << n << ")\n";

     int rtnval;
     if (n == 0 || n == 1)
     {
        rtnval = 1;
     }
     else
     {
        rtnval = (fibonacci(n - 1) + fibonacci(n - 2));
     }
     cout << setw(indent--) << rtnval << endl;

     return rtnval;
  }

  void testFibonacci()
  {
     indent = 0;
     int fib10 = fibonacci(10);
     cout << "fibonacci(10) = " << fib10 << endl;
     cout << "-------------------------" << endl;
  }

  /*
   * An iterative implementation of the fibonacci function.
   */
  int iterativeFibonacci(int n)
  {
     int x;
     int y;
     int z;

     if (n == 0)
     {
        y = 0;
     }
     else
     {
        x = 0;
        y = 1;
        while (n-- > 0)
        {
           z = x + y;
           x = y;
           y = z;
        }
     }
     return y;
  }

  void testIterativeFibonacci()
  {
     int fib10 = iterativeFibonacci(10);
     cout << "iterative fibonacci(10) = " << fib10 << endl;
     cout << "-------------------------" << endl;
  }

  /*
   * Run tests.
   */
  int main()
  {
     if (true) testMoveDisk();
     if (true) testFactorial();
     if (true) testIterativeFactorial();
     if (true) testFibonacci();
     if (true) testIterativeFibonacci();
  }
#+END_SRC

** The Problem with Iteration

   Recursion can almost always be recast as iteration (exceptions are
   called NON-primitive recursive functions). But iteration can be
   problematic as well. For example ...

   1. What is this code doing?
   2. Will it ever terminate?
   3. Will it ever print "Hello, World!"?

#+BEGIN_SRC C++ :tangle hello.cpp
#include <iostream>
#include <cstdlib>
using namespace std;

#define prt(x) #x ": " << x

int p(int i, int n)
{
  int p = 1;
  for (int j = 1; j <= n; j++)
  {
     p *= i;
  }

  return p;
}

int main(int argc, const char* argv[])
{
   int n = ((argc == 2) ? atoi(argv[1]) : 3);

   int total = 3;

   while (true)
   {
      for (int x = 1; x <= (total - 2); x++)
      {
         for (int y = 1; y <= (total - x - 1); y++)
         {
            int z = total - x - y;

            if (p(x, n) + p(y, n) == p(z, n))
            {
               cout << "Hello, World!" << endl;
               cout << '\t'
                    << prt(x) << ", "
                    << prt(y) << ", "
                    << prt(z) << endl;
               cout << '\t'
                    << prt(p(x,n)) << ", "
                    << prt(p(y,n)) << ", "
                    << prt(p(z,n)) << endl;
            }
         }
      }
      total++;
   }

   return 0;
}
#+END_SRC

  What about this code? What does "make it so" attempt to do here?

#+BEGIN_SRC C++ :tangle makeitso.cpp
#include <iostream>
#include <cstdlib>
using namespace std;

unsigned long it(unsigned long x)
{
   return ((x % 2 == 0) ? x / 2 : x * 3 + 1);
}

bool so(unsigned long x)
{
   while (x != 1)
   {
      x = it(x);
   }
   return (x == 1);
}

int main()
{
   unsigned long x = 1;

   while (so(x))
   {
      x++;
   }

   return 0;
}

#+END_SRC
