#+TITLE: Weekly Assignment 03
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything

#+BEGIN_SRC elisp :results silent
  (setq score (- 100 
                 5 ; for failure to write up what you learned
                  0 ; no bonus for 4+ MIs
              ))
  (insert (format "\n#+SCORE: %3.2f\n" score))

#+END_SRC

#+SCORE: 95.00


#+BEGIN: clocktable :maxlevel 2 :scope file
#+CAPTION: Clock summary at [2018-05-19 Sat 14:02]
| Headline                            |    Time |      |
|-------------------------------------+---------+------|
| *Total time*                        | *11:38* |      |
|-------------------------------------+---------+------|
| Exercise 7 on page 149              |    0:23 |      |
| Exercise Converting C to Elisp      |    0:13 |      |
| Exercise 1 on page 166              |    1:06 |      |
| Exercise 12 on page 167             |    1:10 |      |
| Exercise Your Google-Fu             |    0:01 |      |
| Ponder Ten Numbers                  |    6:39 |      |
| \_  Observations:                   |         | 0:48 |
| Ponder Metacognitive Miscalibration |    0:34 |      |
| Notes                               |    1:32 |      |
| \_  Day 1                           |         | 1:32 |
#+END:



Worked with:

James Palmer
Asa Skousen
Matt Wyndham
Jon Manoa
Quade Morrison
Bryan MÃ¼ller 
Zach Delano
Adam Gehring

* DONE Exercise 7 on page 149
  CLOSED: [2018-05-17 Thu 11:34]
  :LOGBOOK:
  CLOCK: [2018-05-17 Thu 11:11]--[2018-05-17 Thu 11:34] =>  0:23
  :END:

  Write pseudocode for a recursive algorithm for generating all
  \(2^n\) bit strings of length /n/.

#+BEGIN_VERSE 
 *ALGORITHM* /genBitStrings(n, str)/
 /// Recursively finds and prints all bit strings
 /// of length n

 /// Input: Integer /n = A non-negative integer/ 
 /// Input: String /str = An empty string /
 /// Output: Prints a list of strings of size n
 /// each containing one of the possible bitstrings of size n

 *if* /n/ is greater than /0/
      /genBitString(n - 1, str + "0")/
      /genBitString(n - 1, str + "1")/
 *else*
      print /str/
#+END_VERSE

* DONE Exercise Converting C to Elisp
  CLOSED: [2018-05-17 Thu 08:26]
  :LOGBOOK:
  CLOCK: [2018-05-17 Thu 08:13]--[2018-05-17 Thu 08:26] =>  0:13
  :END:

  Convert this C code for doing Russian Peasant Multiplication into
  elisp.

#+BEGIN_SRC C
  #include<stdio.h>

  int main()
  {
     long int a,b,rim;
     long int sum=0;

     printf("ENTER MULTIPLICAND: ");
     scanf("%ld",&b);
     printf("ENTER MULTIPLIER: ");
     scanf("%ld",&a);
     while(b>=1)
     {
        rim=b%2;
        b=b/2;
        if(rim==1)
        {
     sum=sum+a;
     printf("%ld\n", sum);
        }
        a=a*2;
     }
     printf("%ld\n",sum);
     return 0;
  }
#+END_SRC


  Hint:

#+BEGIN_SRC emacs-lisp
  (let ((n (string-to-number (read-from-minibuffer "ENTER NUMBER: "))))
    (* 2 n))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  (defun russian-peasant ()
     (let ((b (read-number "ENTER MULTIPLICAND: "))
           (a (read-number "ENTER MULTIPLIER: "))
           (sum 0)
           (rim 0))
           (while (>= b 1)
                  (setq rim (mod b 2)
                        b (/ b 2))
                   (if (= rim 1) 
                       (progn (setq sum (+ sum a))
                              (print sum)))
                   (setq a (* a 2)))
           (print sum)))
                        
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output
  (russian-peasant)
#+END_SRC

#+RESULTS:
: 
: 89
: 
: 267
: 
: 623
: 
: 623

* DONE Exercise 1 on page 166
  CLOSED: [2018-05-17 Thu 15:35]
  :PROPERTIES:
  :ORDERED:  t
  :END:
  :LOGBOOK:
  CLOCK: [2018-05-17 Thu 14:38]--[2018-05-17 Thu 15:35] =>  0:57
  CLOCK: [2018-05-17 Thu 11:35]--[2018-05-17 Thu 11:44] =>  0:09
  :END:

  *a.* If we measure an instance size of computing the greatest common
  divisor of /m/ and /n/ by the size of the second number /n/, by how
  much can the size decrease after one iteration of Euclid's
  algorithm

  *Answer*
  Euclid's GCD algorithm decreases by size m mod n each iteration. 
  The largest number that m mod n can be is n - 1 do to the nature of modular
  arithmetic, so the largest value Euclid's GCD algorithm can decrease 
  in one iteration is n - 1. Therefore, the Euclidean GCD can decrease
  by any integer value between 0 and n - 1.

  *b.* Prove that an instance size will always decrease at least by a
  factor of two after two successive iterations of Euclid's algorithm.

  *Answer*

  Given three iterations of the gcd, a b and c where

  \(GCD(m_1, n_1)\)

  \(GCD(m_2, n_2)\)

  \(GCD(m_3, n_3)\)

  Then m_3 = n_2 = m_1 mod n_1.

  We know that when finding the GCD, m > n. With this knowledge, we can 
  conclude that with this example, \(m_i > p_i\) where \(1 \le i \le 3\)

  To prove that the instance size decreases by a factor of two at least
  every two iterations, we must show that

  \(m_1 \mod n_1 \le \frac{m_1}{2}\)  

  We are now left with two cases. 
  
  Case 1:
    \(n \le \frac{m}{2}\)

  Case 2:
    \(n \gt \frac{m}{2} \)

  Given Case 1, we can determine that

  \((m \mod n) < n \le \frac{m}{2}\)

  Given Case 2, we can determine that

  \((m \mod n) = (m - n) < m - \frac{m}{2}\)

  These two cases guaruntee that every two iterations, the
  instance size will decrease /at least/ by a factor of two.

  Example:

  *Tracing GCD part b*

#+BEGIN_SRC emacs-lisp
  (trace-gcd 34 22)
#+END_SRC


 Where \(r = m \mod n\)


|  m | = |  n | (m/n) | + |  r | m/2 | Case |
|----+---+----+-------+---+----+-----+------|
| 34 | = | 21 | (1)   | + | 13 |  17 |    2 |
| 21 | = | 13 | (1)   | + |  8 |  10 |    2 |
| 13 | = |  8 | (1)   | + |  5 |   6 |    2 |
|  8 | = |  5 | (1)   | + |  3 |   4 |    2 |
|  5 | = |  3 | (1)   | + |  2 |   2 |    2 |
|  3 | = |  2 | (1)   | + |  1 |   1 |    2 |
|  2 | = |  1 | (2)   | + |  0 |   1 |    1 |



* DONE Exercise 12 on page 167
  CLOSED: [2018-05-18 Fri 12:47]
  :LOGBOOK:
  CLOCK: [2018-05-18 Fri 12:20]--[2018-05-18 Fri 12:47] =>  0:27
  CLOCK: [2018-05-17 Thu 17:22]--[2018-05-17 Thu 17:46] =>  0:24
  CLOCK: [2018-05-17 Thu 15:35]--[2018-05-17 Thu 15:54] =>  0:19
  :END:

  /Flipping Pancakes/

  There are /n/ pancakes all of different sizes that are stacked on
  top of each other. You are allowed to slip a flipper under one of
  the pancakes and flip over the whole stack above the flipper. The
  purpose is to arrange pancakes according to their size with the
  biggest at the bottom. (You can see a visualization of this puzzle
  on the /Interactive Mathematics Miscellany and Puzzles/ site [Bog].)
  Design an algorithm for solving this puzzle.

  *Answer*

#+BEGIN_VERSE  
   *ALGORITHM* /pancakeFlip/
   //// Sorts a stack of pancakes placing
   //// the largest pancake on the bottom
   //// and the smalelst on top
   
   //// Input: Integer /n = A non-negative integer, number of pancakes/ 
   //// Input: Array /pancakes = A list of unsorted "pancakes"/
   //// Output: Array of sorted pancakes

   i \leftarrow 0
   *while* /i/ < /n/ *do*
       p \leftarrow index of largest unsorted pancake where index > /i/
       *flip* all the pancakes from /p/ to /n/
       *flip* all the pancakes from /i/ to /n/
#+END_VERSE
  

* DONE Exercise Your Google-Fu
  CLOSED: [2018-05-17 Thu 08:27]
  :LOGBOOK:
  CLOCK: [2018-05-17 Thu 08:26]--[2018-05-17 Thu 08:27] =>  0:01
  :END:

  The only research paper published by a well-known individual was
  devoted to the pancakes flipping problem. Who is that individual?

  Bill Gates

* DONE Ponder Ten Numbers
  CLOSED: [2018-05-19 Sat 14:02]
  :LOGBOOK:
  CLOCK: [2018-05-18 Fri 12:48]--[2018-05-18 Fri 14:20] =>  1:32
  CLOCK: [2018-05-17 Thu 17:47]--[2018-05-17 Thu 18:28] =>  0:41
  CLOCK: [2018-05-16 Wed 12:34]--[2018-05-16 Wed 16:12] =>  3:38
  :END:

  | 8512388977 |
  | 3879812591 |
  | 8496958798 |
  | 6127538570 |
  | 5988858046 |
  | 1153456347 |
  | 4124112452 |
  | 2771040826 |
  | 8847666059 |
  | 2727767664 |

** What is The Question?

   Whatever it is, it was inspired by the [[http://scriptures.lds.org/en/abr/fac_2][Book of Abraham, Facsimile No. 2, explanation of Figure 11]].

   /If the student can find out these numbers, so let it be .../

** Observations:
   :LOGBOOK:
   CLOCK: [2018-05-18 Fri 20:39]--[2018-05-18 Fri 21:27] =>  0:48
   :END:
   
   They do not appear in OEIS.org

   If put into a 10x10 matrix, the row reduced echelon form is 
   the 10x10 identity matrix.

   None of them are Fibonacci numbers.

   The first two numbers are prime.

   |     Number | Prime? |                             Binary | Prime Factorization                     |
   |------------+--------+------------------------------------+-----------------------------------------|
   | 8512388977 | Y      | 0111111011011000001011111101110001 | 8512388977                              |
   | 3879812591 | Y      | 0011100111010000010011110111101111 | 3879812591                              |
   | 8496958798 | N      | 0111111010011101010100110101001110 | 2 * 487 * 1381 * 6317                   |
   | 6127538570 | N      | 0101101101001110101101000110001010 | 2 * 5 * 19 * 1087 * 29669               |
   | 5988858046 | N      | 0101100100111101101011100010111110 | 2 * 1861 * 1609043                      |
   | 1153456347 | N      | 0001000100110000000101100011011011 | 3 * 181 * 2124229                       |
   | 4124112452 | N      | 0011110101110100001111011001000100 | 2 * 2 * 1031028113                      |
   | 2771040826 | N      | 0010100101001010101011101000111010 | 2 * 19 * 72922127                       |
   | 8847666059 | N      | 1000001111010111001010101110001011 | 23 * 384681133                          |
   | 2727767664 | N      | 0010100010100101100110111001110000 | 2 * 2 * 2 * 2 * 3 * 3 * 3 * 3 * 2104759 |

   Sum of numbers = 52629600330 The sum of numbers does not appear on the
   interent according to Google

   52629600330 % 7 = 6
   52629600330 % 11 = 10
   52629600330 % 17 = 16. 

   Our group spent a significant amount of time tryinig to solve this puzzle. We
   tried every avenue of approach we could think of.

   Adding digits, multiplying digits, GCDs, no mathematically
   functions/operations we threw at them seemed to do anything.

   Perhaps they are connected because they are not connected? 
   
   When all is said and down, I have pondered this puzzle for quite a while. I
   feel comfortable with the effort I have put in, despite the fact that I was
   unable to provide what I consider to be an adequate solution.

* DONE Ponder Metacognitive Miscalibration
  CLOSED: [2018-05-18 Fri 20:38]
  :PROPERTIES:
  :ORDERED:  t
  :END:
  :LOGBOOK:
  CLOCK: [2018-05-18 Fri 20:02]--[2018-05-18 Fri 20:36] =>  0:34
  :END:

  Read and think about the ramifications of the article /Prepare Your Mind For
  Learning/ by Smith, Moores and Chang.


  I think this article provides a bit of relief to the previous problems. I thnk
  the last page applies very well to the situation I am in with the previous
  puzzle.

  I have come to the realization that I truly have no idea on how to solve the
  problem. All of the approaches that I normally use to tackle problems like
  these have worked; I have exhausted my toolbox. This has led me to question my
  knowledge.

  Through working with other classmates, I was able to learn some new avenues of
  approach as well as share my own. Even with this collaboration we were unable
  to make any headway on the problem. 

  Perhaps I am on the plateau, although I must confess, this class feels like
  the upward climb. 

  Perhaps the Question is not about the numbers. Perhaps the question is
  something along the lines of "Can you recognize the symptoms of MM in your
  thinking?" If so, my answer is a rounding yes. I am absolutely guilty of
  believing I know more than I actually do. Perhaps this problem was the wake up
  call I needed to reignite my metacognitive abilities.

  
* Notes
  
** Day 1
   :LOGBOOK:
   CLOCK: [2018-05-16 Wed 08:00]--[2018-05-16 Wed 09:32] =>  1:32
   :END:


#+BEGIN_SRC emacs-lisp :results silent
(defun trace-gcd (a b)
(loop with r = 0
      until (zerop b)
      collect (list a '= b (list (/ a b)) ' + (setq r (mod a b)) (/ a 2) (if (<= b (/ a 2)) 1 2))
      do (setq a b b r)))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (trace-gcd 89 40)
#+END_SRC

#+RESULTS:
| 89 | = | 40 | (2) | + | 9 | 44 | 1 |
| 40 | = |  9 | (4) | + | 4 | 20 | 1 |
|  9 | = |  4 | (2) | + | 1 |  4 | 1 |
|  4 | = |  1 | (4) | + | 0 |  2 | 1 |

| 89 | = | 56 | (1)   | + |      33 |  44 |    2 |
| 56 | = | 33 | (1)   | + |      23 |  28 |    2 |
| 33 | = | 23 | (1)   | + |      10 |  16 |    2 |
| 23 | = | 10 | (2)   | + |       3 |  11 |    1 |
| 10 | = |  3 | (3)   | + |       1 |   5 |    1 |
|  3 | = |  1 | (3)   | + |       0 |   1 |    1 |


number of digits of b times 5 is the upper bound of divisions needed by the gcd.



